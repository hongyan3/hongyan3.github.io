import{_ as t,o as p,c as l,R as e}from"./chunks/framework.XiqD54nH.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"code/mysql.md","filePath":"code/mysql.md","lastUpdated":1710923167000}'),i={name:"code/mysql.md"},a=e('<h2 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h2><h3 id="_1-慢查询" tabindex="-1">1. 慢查询 <a class="header-anchor" href="#_1-慢查询" aria-label="Permalink to &quot;1. 慢查询&quot;">​</a></h3><p>如何定位慢查询？</p><ol><li><p>方案一：开源工具</p><ul><li>调试工具：Arthas</li><li>运维工具：Prometheus、Skywalking</li></ul></li><li><p>方案二：MySQL自带满日志</p><p><img src="https://s2.loli.net/2024/03/08/YFwzVjXftAPMenl.png" alt="image-20231229160532627"></p></li></ol><p>如何分析慢SQL语句？</p><ol><li><p>采用<code>EXPLAIN</code>或者<code>DESC</code>命令获取MySQL如何执行SELECT语句</p><p><img src="https://s2.loli.net/2024/03/08/cYrsXDemf5R2hOq.png" alt="image-20231230134440074"></p></li></ol><blockquote><p>如果SQL的type是<code>index</code>或者<code>all</code>时，就需要优化</p></blockquote><h3 id="_2-索引" tabindex="-1">2. 索引 <a class="header-anchor" href="#_2-索引" aria-label="Permalink to &quot;2. 索引&quot;">​</a></h3><p>什么是索引？</p><p>索引（index）是帮助MySQL<strong>高效获取</strong>数据的数据结构结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（<strong>B+树</strong>），这些数据以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p>B+树和B树的对比</p><p>B+Tree是在BTree基础上的一种优化，使其更合适实现外存储索引结构，InnoDB存储引擎就是用B+树实现其索引结构</p><p><img src="https://s2.loli.net/2024/03/08/zqdkH3lEK1sIx96.png" alt="image-20231230215211312"></p><p>区别：</p><ol><li>磁盘读写代价B+树更低（B+树只在叶子结点存储数据）</li><li>查询效率B+树更加稳定</li><li>B+树便于扫库和区间查询，叶子结点之间是双向链表</li></ol><p>聚簇索引与非聚簇索引</p><p><img src="https://s2.loli.net/2024/03/08/Fg1tbIRyZvJm2oC.png" alt="image-20231230215620758"></p><p>回表查询</p><p>通过二级索引（非聚簇索引）找到对应的主键值，到聚簇索引中查找整行数据，这个过程就是回表</p><p>覆盖索引</p><p><strong>覆盖索引</strong>是指查询使用了索引，并且需要返回的列，在该索引中已经能够全部找得到</p><p><img src="https://s2.loli.net/2024/03/08/qh8PXObM1TZpESF.png" alt="image-20231230220950503"></p><p>MySQL超大分页处理</p><p>在数据量比较大的时候，如果进行limit分页查询，在查询时，越往后，分页查询效率越低</p><p>优化思路：一般分页查询时，通过创建<strong>覆盖索引</strong>能够比较好的提升性能，可以通过<strong>覆盖索引</strong>加<strong>子查询</strong>形式进行优化</p><p>索引创建原则</p><p><img src="https://s2.loli.net/2024/03/08/dfgbqQK8WjIG235.png" alt="image-20231231124825749"></p><p>什么情况下索引会失效？</p><ol><li>违反了最左前缀法则</li><li>范围查询右边的列</li><li>在索引列上进行运算操作</li><li>字符串不加单引号（隐式类型转换）</li><li>以%开头的Like模糊查询，导致索引失效，仅尾部模糊匹配则不会</li></ol><p>SQL优化经验</p><p><img src="https://s2.loli.net/2024/03/08/dLNVpezsJFZy39b.png" alt="image-20231231132223273"></p><p><img src="https://s2.loli.net/2024/03/08/FsubCfwTey576QD.png" alt="image-20231231132833872"></p><h3 id="_3-事务的特性" tabindex="-1">3. 事务的特性 <a class="header-anchor" href="#_3-事务的特性" aria-label="Permalink to &quot;3. 事务的特性&quot;">​</a></h3><p><img src="https://s2.loli.net/2024/03/08/7pxDTzMIjthrZGf.png" alt="image-20240106214949389"></p><p>并发事务问题</p><p><img src="https://s2.loli.net/2024/03/08/AhMIVRg5XH7m9Yv.png" alt="image-20240106215300844"></p><p>怎么解决并发事务问题？</p><p><img src="https://s2.loli.net/2024/03/08/bm5yQ6XCiZhlpJx.png" alt="image-20240106215633463"></p><p>undo log和redo log的区别</p><p><img src="https://s2.loli.net/2024/03/08/asDX93xH685w2pl.png" alt="image-20240106220024943"></p><p><img src="https://s2.loli.net/2024/03/08/C76pNsxoEZmukfz.png" alt="image-20240106220654887"></p><p><img src="https://s2.loli.net/2024/03/08/s6aybRHJwPeiBo2.png" alt="image-20240106220633733"></p><p>事务中的隔离性是如何保证的？</p><ul><li>锁：排他锁（如一个事务获取了一行的排他锁，其他事务则不能再获取该行的其他锁）</li><li>MVCC：多版本并发控制</li></ul><p><img src="https://s2.loli.net/2024/03/08/e5sCwhoA3RJVSQZ.png" alt="image-20240106225321916"></p><p>解释一下MVCC</p><p><img src="https://s2.loli.net/2024/03/08/vxAqrnGwEZgjd6b.png" alt="image-20240106221458999"></p><p><img src="https://s2.loli.net/2024/03/08/P7FeNd3YWbwlirt.png" alt="image-20240106221541964"></p><p><img src="https://s2.loli.net/2024/03/08/u3tEJMCfkhaiwge.png" alt="image-20240106222844693"></p><h3 id="_4-主从同步原理" tabindex="-1">4. 主从同步原理 <a class="header-anchor" href="#_4-主从同步原理" aria-label="Permalink to &quot;4. 主从同步原理&quot;">​</a></h3><p><img src="https://s2.loli.net/2024/03/08/gSYHrxPks96Jmlu.png" alt="image-20240106225528664"></p><p><img src="https://s2.loli.net/2024/03/08/1AfL9EDjpqoycrW.png" alt="image-20240106225744605"></p>',52),s=[a];function o(n,r,g,m,c,h){return p(),l("div",null,s)}const u=t(i,[["render",o]]);export{_ as __pageData,u as default};
