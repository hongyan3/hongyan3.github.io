import{_ as l,o as i,c as e,R as s}from"./chunks/framework.XiqD54nH.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"code/redis.md","filePath":"code/redis.md","lastUpdated":1711531652000}'),t={name:"code/redis.md"},o=s('<h2 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h2><h3 id="_1-缓存穿透" tabindex="-1">1. 缓存穿透 <a class="header-anchor" href="#_1-缓存穿透" aria-label="Permalink to &quot;1. 缓存穿透&quot;">​</a></h3><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。</p><ol><li><strong>缓存空数据</strong></li></ol><p>查询返回的数据为空，仍把这个结果进行缓存</p><ul><li><p>优点：简单</p></li><li><p>缺点：消耗内存，可能存在不一致的问题</p></li></ul><blockquote><p>不一致指高并发环境下，插入key值，还未更新缓存便返回旧缓存值NUL</p></blockquote><ol start="2"><li><strong>布隆过滤器</strong></li></ol><p><img src="https://s2.loli.net/2024/03/08/VjP7lWdLArZTXKJ.png" alt="image-20231121001322480"></p><ul><li>优点：内存占用少，没有多余的key</li><li>缺点：实现复杂，存在误判</li></ul><blockquote><p>对于误判率，一般情况下设置为不超过5%，在高并发环境下不至于压倒数据库</p></blockquote><h3 id="_2-缓存击穿" tabindex="-1">2. 缓存击穿 <a class="header-anchor" href="#_2-缓存击穿" aria-label="Permalink to &quot;2. 缓存击穿&quot;">​</a></h3><p>给某个key设置了过期时间，当key过期的时候，恰好这个时间点对这个key有大量的并发请求，这些并发请求可能会瞬间将数据库压垮</p><ol><li><strong>分布式锁（互斥锁）</strong>：强一致、性能差</li><li><strong>逻辑过期</strong>：高可用、性能优，不能保证性能绝对一致</li></ol><p><img src="https://s2.loli.net/2024/03/08/uSkzh6psKWXrEeI.png" alt="image-20231121204114184"></p><h3 id="_3-缓存雪崩" tabindex="-1">3. 缓存雪崩 <a class="header-anchor" href="#_3-缓存雪崩" aria-label="Permalink to &quot;3. 缓存雪崩&quot;">​</a></h3><p>指在同一时间段内，大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力</p><ol><li>给不同的key的TTL添加随机值</li><li>利用Redis集群提高服务可用性</li><li>给缓存业务添加降级限流策略（保底）</li><li>给业务添加多级缓存</li></ol><h3 id="_4-双写一致" tabindex="-1">4. 双写一致 <a class="header-anchor" href="#_4-双写一致" aria-label="Permalink to &quot;4. 双写一致&quot;">​</a></h3><p>指修改了数据库的数据也要同时更新缓存数据，缓存和数据库的数据保持一致</p><p>需要分析业务场景数据是否需要强一致性</p><ol><li><strong>允许延时一致的业务</strong>， 采取异步通知 <ul><li>MQ中间件，更新数据后，通知缓存删除</li><li>Canal中间件，不需要修改业务代码，伪装成MySql的一个从节点，Canal通过读取binlog数据更新缓存</li><li>延时双删（存在脏数据）</li></ul></li><li><strong>强一致的</strong>，采用Redisson提供的读写锁 <ul><li>共享锁：读锁readLock，加锁之后其他线程可用共享读操作</li><li>排他锁：写锁writeLock，也叫独占锁，加锁之后堵塞其他线程读写操作</li></ul></li></ol><h3 id="_5-redis持久化" tabindex="-1">5. Redis持久化 <a class="header-anchor" href="#_5-redis持久化" aria-label="Permalink to &quot;5. Redis持久化&quot;">​</a></h3><ol><li><p><strong>RDB</strong></p><p>全称Redis Databases Backup File（Redis数据备份文件），也叫做Redis数据快照文件。</p><ul><li><p>save：由Redis主进程来执行RDB，会阻塞所有命令</p></li><li><p>bgsave：由Redis子进程来支持RDB，避免主进程受到影响</p></li></ul><blockquote><p><strong>RDB的执行原理</strong>：bgsave会fork主进程得到子进程，子进程共享主进程的内存数据，完成fork后读取内存数据并写入RDB文件</p></blockquote></li><li><p><strong>AOF</strong></p><p>全称Append Only File（追加文件），Redis处理的每一个写命令都会记录在AOF文件，可以看作是命令日志文件。</p><p><img src="https://s2.loli.net/2024/03/08/AUDYzZyH5n9cfgN.png" alt="image-20231121213222105"></p><blockquote><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行<strong>bgrewriteaof</strong>命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p></blockquote></li></ol><p><img src="https://s2.loli.net/2024/03/08/QjnMtSsLOKCYBXJ.png" alt="image-20231121213738023"></p><h3 id="_6-redis数据删除策略" tabindex="-1">6. Redis数据删除策略 <a class="header-anchor" href="#_6-redis数据删除策略" aria-label="Permalink to &quot;6. Redis数据删除策略&quot;">​</a></h3><ol><li><p><strong>惰性删除</strong></p><p>设置key的过期时间后，只有在需要这个key的时候才去检查它是否过期，如果过期则删除，反之则返回数据</p><ul><li>优点：对CPU友好，对于很多用不到的key不必花时间去进行过期检查</li><li>缺点：对内存不友好，如果key过期，但一直未使用，则会一直存在内存中，永不释放</li></ul></li><li><p><strong>定期删除</strong></p><p>每隔一段时间就对一些随机的key进行检查，删除里面过期的key</p><p>定期删除有两种模式：</p><ul><li>SLOW模式是定时任务，执行频率默认10hz，可通过配置文件修改</li><li>FAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</li></ul><p><strong>优点</strong>：可以通过限制删除操作的时长和频率来减少对CPU的影响，同时也能有效释放内存中的key</p><p><strong>缺点</strong>：难以确定删除操作的时间和频率</p></li></ol><p>Redis的过期删除策略：<strong>惰性删除</strong> + <strong>定期删除</strong>两种策略配合使用</p><h3 id="_7-redis的数据淘汰策略" tabindex="-1">7. Redis的数据淘汰策略 <a class="header-anchor" href="#_7-redis的数据淘汰策略" aria-label="Permalink to &quot;7. Redis的数据淘汰策略&quot;">​</a></h3><p>指当Redis中的内存不够用时，此时向Redis中添加新的key，Redis就会按照某种策略将内存中的数据删除，这种策略就叫做数据淘汰策略</p><ul><li><p><strong>LRU（Last Recently Used</strong>最近最少使用。用当前的时间减去最后一次的访问时间，这个值越大则淘汰优先级越高</p></li><li><p><strong>LFU（Last Frequently Used</strong>最少频率使用。统计每一个key的访问频率，值越小，淘汰优先级越高</p></li></ul><h3 id="_8-redis分布式锁" tabindex="-1">8. Redis分布式锁 <a class="header-anchor" href="#_8-redis分布式锁" aria-label="Permalink to &quot;8. Redis分布式锁&quot;">​</a></h3><ol><li><p>分布式锁的实现</p><p>通常使用<strong>redisson</strong>来实现分布式锁，底层使用<strong>setnx</strong>和<strong>lua</strong>脚本（保证原子性）</p></li><li><p>合理控制锁的有效时间</p><p>Redisson的分布式锁中，提供了<strong>WatchDog（看门狗）<strong>机制，一个线程获取锁成功后，WatchDog会对持有锁的线程</strong>续期</strong>（默认每隔10s续一次）</p></li><li><p>可重入锁</p><p>redisson的分布式锁可以重入，在redis中使用<strong>hash</strong>来存储<strong>线程信息和重入次数</strong></p></li><li><p>主从一致性</p><p>redisson<strong>不能解决</strong>主从数据一致的问题，但是可以通过<strong>红锁</strong>来实现，但是<strong>性能太低</strong>，如果要保证业务的强一致性，建议采用<strong>zookeeper</strong>实现的分布式锁</p><p>RedLock（红锁）：不能只在一个实例上创建锁，应该在多个实例上（n/2+1）创建锁</p></li></ol><h3 id="_9-redis集群方案" tabindex="-1">9. Redis集群方案 <a class="header-anchor" href="#_9-redis集群方案" aria-label="Permalink to &quot;9. Redis集群方案&quot;">​</a></h3><ol><li><p>主从复制（读写分离）</p><p>一般都是一主多从，主节点负责写数据，从节点负责读数据</p><ul><li><p>主从全量同步</p><p><img src="https://s2.loli.net/2024/03/08/XbEeSaqkrVY9gm4.png" alt="image-20231123211000628"></p></li><li><p>主从增量同步</p><p><img src="https://s2.loli.net/2024/03/08/VYTP5ktdbcvBxZR.png" alt="image-20231123211229609"></p></li></ul></li><li><p>哨兵模式</p><ul><li><p>哨兵模式的作用 <img src="https://s2.loli.net/2024/03/20/MyHDx9YJGn7qeul.png" alt="image-20240320152052007"></p></li><li><p>服务状态监控</p><p><img src="https://s2.loli.net/2024/03/20/WYFQgNcyV6a5rLO.png" alt="image-20240320152220254"></p></li><li><p>集群<strong>脑裂</strong></p><p><img src="https://s2.loli.net/2024/03/20/vFq7Rag6cGOT5mi.png" alt="image-20240320152431151"></p></li></ul></li><li><p>分片集群</p><p><img src="https://s2.loli.net/2024/03/20/6id45KqCnyETprv.png" alt="image-20240320151601733"></p><ul><li>分片集群的作用 <ul><li>集群中有多个master，每个master保存不同的数据</li><li>每个master都可以有多个slave节点</li><li>master之间通过ping监测彼此健康状态</li><li>客户端可以访问集群任意节点，最终都会被转发到正确的节点</li></ul></li></ul></li></ol><h3 id="_10-redis为什么快" tabindex="-1">10. Redis为什么快 <a class="header-anchor" href="#_10-redis为什么快" aria-label="Permalink to &quot;10. Redis为什么快&quot;">​</a></h3><ul><li><p>基于内存</p></li><li><p>单线程，没有上下文切换</p></li><li><p>I/O多路复用</p><ul><li><p><strong>阻塞IO</strong></p><p><img src="https://s2.loli.net/2024/03/20/ntskhKZdq4VQebI.png" alt="image-20240320154737061"></p></li><li><p><strong>非阻塞IO</strong></p><p><img src="https://s2.loli.net/2024/03/20/CVAisNuotFhXPrv.png" alt="image-20240320154826212"></p></li><li><p><strong>IO多路复用</strong></p><p><img src="https://s2.loli.net/2024/03/20/exL1qNJAk6zYwp8.png" alt="image-20240320155136805"></p></li></ul></li></ul>',37),r=[o];function a(p,n,g,d,h,c){return i(),e("div",null,r)}const k=l(t,[["render",a]]);export{m as __pageData,k as default};
