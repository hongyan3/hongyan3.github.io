import{_ as l,o as i,c as e,R as t}from"./chunks/framework.XiqD54nH.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/Java面试笔记.md","filePath":"interview/Java面试笔记.md","lastUpdated":1709878123000}'),s={name:"interview/Java面试笔记.md"},p=t('<h2 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h2><h3 id="_1-缓存穿透" tabindex="-1">1. 缓存穿透 <a class="header-anchor" href="#_1-缓存穿透" aria-label="Permalink to &quot;1. 缓存穿透&quot;">​</a></h3><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。</p><ol><li><strong>缓存空数据</strong></li></ol><p>查询返回的数据为空，仍把这个结果进行缓存</p><ul><li><p>优点：简单</p></li><li><p>缺点：消耗内存，可能存在不一致的问题</p></li></ul><blockquote><p>不一致指高并发环境下，插入key值，还未更新缓存便返回旧缓存值NUL</p></blockquote><ol start="2"><li><strong>布隆过滤器</strong></li></ol><p><img src="https://s2.loli.net/2024/03/08/VjP7lWdLArZTXKJ.png" alt="image-20231121001322480"></p><ul><li>优点：内存占用少，没有多余的key</li><li>缺点：实现复杂，存在误判</li></ul><blockquote><p>对于误判率，一般情况下设置为不超过5%，在高并发环境下不至于压倒数据库</p></blockquote><h3 id="_2-缓存击穿" tabindex="-1">2. 缓存击穿 <a class="header-anchor" href="#_2-缓存击穿" aria-label="Permalink to &quot;2. 缓存击穿&quot;">​</a></h3><p>给某个key设置了过期时间，当key过期的时候，恰好这个时间点对这个key有大量的并发请求，这些并发请求可能会瞬间将数据库压垮</p><ol><li><strong>分布式锁（互斥锁）</strong>：强一致、性能差</li><li><strong>逻辑过期</strong>：高可用、性能优，不能保证性能绝对一致</li></ol><p><img src="https://s2.loli.net/2024/03/08/uSkzh6psKWXrEeI.png" alt="image-20231121204114184"></p><h3 id="_3-缓存雪崩" tabindex="-1">3. 缓存雪崩 <a class="header-anchor" href="#_3-缓存雪崩" aria-label="Permalink to &quot;3. 缓存雪崩&quot;">​</a></h3><p>指在同一时间段内，大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力</p><ol><li>给不同的key的TTL添加随机值</li><li>利用Redis集群提高服务可用性</li><li>给缓存业务添加降级限流策略（保底）</li><li>给业务添加多级缓存</li></ol><h3 id="_4-双写一致" tabindex="-1">4. 双写一致 <a class="header-anchor" href="#_4-双写一致" aria-label="Permalink to &quot;4. 双写一致&quot;">​</a></h3><p>指修改了数据库的数据也要同时更新缓存数据，缓存和数据库的数据保持一致</p><p>需要分析业务场景数据是否需要强一致性</p><ol><li><strong>允许延时一致的业务</strong>， 采取异步通知 <ul><li>MQ中间件，更新数据后，通知缓存删除</li><li>Canal中间件，不需要修改业务代码，伪装成MySql的一个从节点，Canal通过读取binlog数据更新缓存</li><li>延时双删（存在脏数据）</li></ul></li><li><strong>强一致的</strong>，采用Redisson提供的读写锁 <ul><li>共享锁：读锁readLock，加锁之后其他线程可用共享读操作</li><li>排他锁：写锁writeLock，也叫独占锁，加锁之后堵塞其他线程读写操作</li></ul></li></ol><h3 id="_5-redis持久化" tabindex="-1">5. Redis持久化 <a class="header-anchor" href="#_5-redis持久化" aria-label="Permalink to &quot;5. Redis持久化&quot;">​</a></h3><ol><li><p><strong>RDB</strong></p><p>全称Redis Databases Backup File（Redis数据备份文件），也叫做Redis数据快照文件。</p><ul><li><p>save：由Redis主进程来执行RDB，会阻塞所有命令</p></li><li><p>bgsave：由Redis子进程来支持RDB，避免主进程受到影响</p></li></ul><blockquote><p><strong>RDB的执行原理</strong>：bgsave会fork主进程得到子进程，子进程共享主进程的内存数据，完成fork后读取内存数据并写入RDB文件</p></blockquote></li><li><p><strong>AOF</strong></p><p>全称Append Only File（追加文件），Redis处理的每一个写命令都会记录在AOF文件，可以看作是命令日志文件。</p><p><img src="https://s2.loli.net/2024/03/08/AUDYzZyH5n9cfgN.png" alt="image-20231121213222105"></p><blockquote><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行<strong>bgrewriteaof</strong>命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p></blockquote></li></ol><p><img src="https://s2.loli.net/2024/03/08/QjnMtSsLOKCYBXJ.png" alt="image-20231121213738023"></p><h3 id="_6-redis数据删除策略" tabindex="-1">6. Redis数据删除策略 <a class="header-anchor" href="#_6-redis数据删除策略" aria-label="Permalink to &quot;6. Redis数据删除策略&quot;">​</a></h3><ol><li><p><strong>惰性删除</strong></p><p>设置key的过期时间后，只有在需要这个key的时候才去检查它是否过期，如果过期则删除，反之则返回数据</p><ul><li>优点：对CPU友好，对于很多用不到的key不必花时间去进行过期检查</li><li>缺点：对内存不友好，如果key过期，但一直未使用，则会一直存在内存中，永不释放</li></ul></li><li><p><strong>定期删除</strong></p><p>每隔一段时间就对一些随机的key进行检查，删除里面过期的key</p><p>定期删除有两种模式：</p><ul><li>SLOW模式是定时任务，执行频率默认10hz，可通过配置文件修改</li><li>FAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</li></ul><p><strong>优点</strong>：可以通过限制删除操作的时长和频率来减少对CPU的影响，同时也能有效释放内存中的key</p><p><strong>缺点</strong>：难以确定删除操作的时间和频率</p></li></ol><p>Redis的过期删除策略：<strong>惰性删除</strong> + <strong>定期删除</strong>两种策略配合使用</p><h3 id="_7-redis的数据淘汰策略" tabindex="-1">7. Redis的数据淘汰策略 <a class="header-anchor" href="#_7-redis的数据淘汰策略" aria-label="Permalink to &quot;7. Redis的数据淘汰策略&quot;">​</a></h3><p>指当Redis中的内存不够用时，此时向Redis中添加新的key，Redis就会按照某种策略将内存中的数据删除，这种策略就叫做数据淘汰策略</p><ul><li><p>**LRU（Last Recently Used）**最近最少使用。用当前的时间减去最后一次的访问时间，这个值越大则淘汰优先级越高</p></li><li><p>**LFU（Last Frequently Used）**最少频率使用。统计每一个key的访问频率，值越小，淘汰优先级越高</p></li></ul><h3 id="_8-redis分布式锁" tabindex="-1">8. Redis分布式锁 <a class="header-anchor" href="#_8-redis分布式锁" aria-label="Permalink to &quot;8. Redis分布式锁&quot;">​</a></h3><ol><li><p>分布式锁的实现</p><p>通常使用<strong>redisson</strong>来实现分布式锁，底层使用<strong>setnx</strong>和<strong>lua</strong>脚本（保证原子性）</p></li><li><p>合理控制锁的有效时间</p><p>Redisson的分布式锁中，提供了<strong>WatchDog（看门狗）<strong>机制，一个线程获取锁成功后，WatchDog会对持有锁的线程</strong>续期</strong>（默认每隔10s续一次）</p></li><li><p>可重入锁</p><p>redisson的分布式锁可以重入，在redis中使用<strong>hash</strong>来存储<strong>线程信息和重入次数</strong></p></li><li><p>主从一致性</p><p>redisson<strong>不能解决</strong>主从数据一致的问题，但是可以通过<strong>红锁</strong>来实现，但是<strong>性能太低</strong>，如果要保证业务的强一致性，建议采用<strong>zookeeper</strong>实现的分布式锁</p><p>RedLock（红锁）：不能只在一个实例上创建锁，应该在多个实例上（n/2+1）创建锁</p></li></ol><h3 id="_9-redis集群方案" tabindex="-1">9. Redis集群方案 <a class="header-anchor" href="#_9-redis集群方案" aria-label="Permalink to &quot;9. Redis集群方案&quot;">​</a></h3><ol><li><p>主从复制（读写分离）</p><p>一般都是一主多从，主节点负责写数据，从节点负责读数据</p><ul><li><p>主从全量同步</p><p><img src="https://s2.loli.net/2024/03/08/XbEeSaqkrVY9gm4.png" alt="image-20231123211000628"></p></li><li><p>主从增量同步</p><p><img src="https://s2.loli.net/2024/03/08/VYTP5ktdbcvBxZR.png" alt="image-20231123211229609"></p></li></ul></li></ol><h2 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h2><h3 id="_1-慢查询" tabindex="-1">1. 慢查询 <a class="header-anchor" href="#_1-慢查询" aria-label="Permalink to &quot;1. 慢查询&quot;">​</a></h3><p>如何定位慢查询？</p><ol><li><p>方案一：开源工具</p><ul><li>调试工具：Arthas</li><li>运维工具：Prometheus、Skywalking</li></ul></li><li><p>方案二：MySQL自带满日志</p><p><img src="https://s2.loli.net/2024/03/08/YFwzVjXftAPMenl.png" alt="image-20231229160532627"></p></li></ol><p>如何分析慢SQL语句？</p><ol><li><p>采用<code>EXPLAIN</code>或者<code>DESC</code>命令获取MySQL如何执行SELECT语句</p><p><img src="https://s2.loli.net/2024/03/08/cYrsXDemf5R2hOq.png" alt="image-20231230134440074"></p></li></ol><blockquote><p>如果SQL的type是<code>index</code>或者<code>all</code>时，就需要优化</p></blockquote><h3 id="_2-索引" tabindex="-1">2. 索引 <a class="header-anchor" href="#_2-索引" aria-label="Permalink to &quot;2. 索引&quot;">​</a></h3><p>什么是索引？</p><p>索引（index）是帮助MySQL<strong>高效获取</strong>数据的数据结构结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（<strong>B+树</strong>），这些数据以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p>B+树和B树的对比</p><p>B+Tree是在BTree基础上的一种优化，使其更合适实现外存储索引结构，InnoDB存储引擎就是用B+树实现其索引结构</p><p><img src="https://s2.loli.net/2024/03/08/zqdkH3lEK1sIx96.png" alt="image-20231230215211312"></p><p>区别：</p><ol><li>磁盘读写代价B+树更低（B+树只在叶子结点存储数据）</li><li>查询效率B+树更加稳定</li><li>B+树便于扫库和区间查询，叶子结点之间是双向链表</li></ol><p>聚簇索引与非聚簇索引</p><p><img src="https://s2.loli.net/2024/03/08/Fg1tbIRyZvJm2oC.png" alt="image-20231230215620758"></p><p>回表查询</p><p>通过二级索引（非聚簇索引）找到对应的主键值，到聚簇索引中查找整行数据，这个过程就是回表</p><p>覆盖索引</p><p><strong>覆盖索引</strong>是指查询使用了索引，并且需要返回的列，在该索引中已经能够全部找得到</p><p><img src="https://s2.loli.net/2024/03/08/qh8PXObM1TZpESF.png" alt="image-20231230220950503"></p><p>MySQL超大分页处理</p><p>在数据量比较大的时候，如果进行limit分页查询，在查询时，越往后，分页查询效率越低</p><p>优化思路：一般分页查询时，通过创建<strong>覆盖索引</strong>能够比较好的提升性能，可以通过<strong>覆盖索引</strong>加<strong>子查询</strong>形式进行优化</p><p>索引创建原则</p><p><img src="https://s2.loli.net/2024/03/08/dfgbqQK8WjIG235.png" alt="image-20231231124825749"></p><p>什么情况下索引会失效？</p><ol><li>违反了最左前缀法则</li><li>范围查询右边的列</li><li>在索引列上进行运算操作</li><li>字符串不加单引号（隐式类型转换）</li><li>以%开头的Like模糊查询，导致索引失效，仅尾部模糊匹配则不会</li></ol><p>SQL优化经验</p><p><img src="https://s2.loli.net/2024/03/08/dLNVpezsJFZy39b.png" alt="image-20231231132223273"></p><p><img src="https://s2.loli.net/2024/03/08/FsubCfwTey576QD.png" alt="image-20231231132833872"></p><h3 id="_3-事务的特性" tabindex="-1">3. 事务的特性 <a class="header-anchor" href="#_3-事务的特性" aria-label="Permalink to &quot;3. 事务的特性&quot;">​</a></h3><p><img src="https://s2.loli.net/2024/03/08/7pxDTzMIjthrZGf.png" alt="image-20240106214949389"></p><p>并发事务问题</p><p><img src="https://s2.loli.net/2024/03/08/AhMIVRg5XH7m9Yv.png" alt="image-20240106215300844"></p><p>怎么解决并发事务问题？</p><p><img src="https://s2.loli.net/2024/03/08/bm5yQ6XCiZhlpJx.png" alt="image-20240106215633463"></p><p>undo log和redo log的区别</p><p><img src="https://s2.loli.net/2024/03/08/asDX93xH685w2pl.png" alt="image-20240106220024943"></p><p><img src="https://s2.loli.net/2024/03/08/C76pNsxoEZmukfz.png" alt="image-20240106220654887"></p><p><img src="https://s2.loli.net/2024/03/08/s6aybRHJwPeiBo2.png" alt="image-20240106220633733"></p><p>事务中的隔离性是如何保证的？</p><ul><li>锁：排他锁（如一个事务获取了一行的排他锁，其他事务则不能再获取该行的其他锁）</li><li>MVCC：多版本并发控制</li></ul><p><img src="https://s2.loli.net/2024/03/08/e5sCwhoA3RJVSQZ.png" alt="image-20240106225321916"></p><p>解释一下MVCC</p><p><img src="https://s2.loli.net/2024/03/08/vxAqrnGwEZgjd6b.png" alt="image-20240106221458999"></p><p><img src="https://s2.loli.net/2024/03/08/P7FeNd3YWbwlirt.png" alt="image-20240106221541964"></p><p><img src="https://s2.loli.net/2024/03/08/u3tEJMCfkhaiwge.png" alt="image-20240106222844693"></p><h3 id="_4-主从同步原理" tabindex="-1">4. 主从同步原理 <a class="header-anchor" href="#_4-主从同步原理" aria-label="Permalink to &quot;4. 主从同步原理&quot;">​</a></h3><p><img src="https://s2.loli.net/2024/03/08/gSYHrxPks96Jmlu.png" alt="image-20240106225528664"></p><p><img src="https://s2.loli.net/2024/03/08/1AfL9EDjpqoycrW.png" alt="image-20240106225744605"></p>',87),a=[p];function o(r,n,g,d,h,c){return i(),e("div",null,a)}const k=l(s,[["render",o]]);export{u as __pageData,k as default};
